{"version":3,"sources":["feedback/Section.js","feedback/FeedbackOptions.js","feedback/Statistics.js","feedback/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","type","name","onClick","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","changeValueState","e","target","setState","prevState","values","this","reduce","a","b","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAaeA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,M,MCIUC,MAPf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OAAOC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAI,OAClC,wBAAQC,KAAK,SAASC,KAAMF,EAAiBG,QAASP,EAAtD,SACGI,EAAK,GAAGI,cAAgBJ,EAAKK,MAAM,IADCL,OCqB5BM,MAvBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,oDAEGC,EAFH,WCDSC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCuD3BC,E,4MAjDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,iBAAmB,SAAAC,GACjB,IAAMf,EAAOe,EAAEC,OAAOhB,KACtB,EAAKiB,UAAS,SAAAC,GACZ,OAAO,eAAGlB,EAAOkB,EAAUlB,GAAQ,O,mEAKrC,OAAOL,OAAOwB,OAAOC,KAAKP,OAAOQ,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,K,wDAIzD,OAAOC,KAAKC,MAAyB,IAAlBL,KAAKP,MAAMR,KAAce,KAAKM,wB,+BAGzC,IAAD,EACwBN,KAAKP,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASjB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS2B,KAAKP,MACdnB,gBAAiB0B,KAAKN,qBAG1B,cAAC,EAAD,CAASxB,MAAM,aAAf,SACiC,IAA9B8B,KAAKM,qBACJ,cAAC,EAAD,CAAcf,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,KAAKM,qBACZjB,mBAAoBW,KAAKO,6C,GAzCrBC,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.414492cc.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\nexport default Section;\n","import PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return Object.keys(options).map(item => (\r\n    <button type=\"button\" name={item} key={item} onClick={onLeaveFeedback}>\r\n      {item[0].toUpperCase() + item.slice(1)}\r\n    </button>\r\n  ));\r\n}\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad:{bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>\r\n        Positive feedback:\r\n        {positivePercentage}%\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\r\nimport Section from './feedback/Section';\r\nimport './feedback/feedback.css';\r\nimport FeedbackOptions from './feedback/FeedbackOptions';\r\nimport Statistics from './feedback/Statistics';\r\nimport Notification from './feedback/Notification';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  changeValueState = e => {\r\n    const name = e.target.name;\r\n    this.setState(prevState => {\r\n      return { [name]: prevState[name] + 1 };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback() {\r\n    return Object.values(this.state).reduce((a, b) => a + b, 0);\r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\r\n  }\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.changeValueState}\r\n          ></FeedbackOptions>\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() === 0 ? (\r\n            <Notification message=\"No feedback given\"></Notification>\r\n          ) : (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            ></Statistics>\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}